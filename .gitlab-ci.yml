stages:
  - build
  - test
  - publish

variables:
  IMAGE: '$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG'
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

gradle:
  stage: build
  image: openjdk:11
  only:
    refs:
      - branches
    variables:
      # run for protected and release branches only
      - $CI_COMMIT_REF_PROTECTED == 'true'
      - $CI_COMMIT_BRANCH =~ /^release_.*/
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - .gradle/
    - key: $CI_PIPELINE_ID
      policy: push
      paths:
        - build/
  script:
    - ./gradlew --warning-mode all ktlintCheck
    - ./gradlew build
    - ./gradlew jibBuildTar --image=$IMAGE

run-tests:
  stage: test
  image: openjdk:11
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull
      paths:
        - .gradle/
    - key: $CI_PIPELINE_ID
      policy: pull
      paths:
        - build/
  script:
    - ./gradlew jacocoTestReport
    - awk -F, '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, " lines covered"; print 100*covered/lines, "% covered" }' build/reports/jacoco/test/jacocoTestReport.csv
  coverage: '/([\d,.]+) \% covered/'

run-tests-PyApiClientGenerator:
  stage: test
  image: docker:25
  services:
    - docker:25-dind
  artifacts:
    name: coverage
    paths:
      - generatedCodeTests/PyApiClientGenerator/htmlcov/
  script:
    - cd generatedCodeTests/PyApiClientGenerator
    - sh run.sh
  coverage: '/TOTAL.*\s(\d+%)/'

run-tests-PyApiAsyncClientGenerator:
  stage: test
  image: docker:25
  services:
    - docker:25-dind
  artifacts:
    name: coverage
    paths:
      - generatedCodeTests/PyApiAsyncClientGenerator/htmlcov/
  script:
    - cd generatedCodeTests/PyApiAsyncClientGenerator
    - sh run.sh
  coverage: '/TOTAL.*\s(\d+%)/'

run-tests-PyDataclassGenerator:
  stage: test
  image: docker:25
  services:
    - docker:25-dind
  artifacts:
    name: coverage
    paths:
      - generatedCodeTests/PyDataclassGenerator/htmlcov/
  script:
    - cd generatedCodeTests/PyDataclassGenerator
    - sh run.sh
  coverage: '/TOTAL.*\s(\d+%)/'

run-tests-PyMarshmallowDataclassGenerator:
  stage: test
  image: docker:25
  services:
    - docker:25-dind
  artifacts:
    name: coverage
    paths:
      - generatedCodeTests/PyMarshmallowDataclassGenerator/htmlcov/
  script:
    - cd generatedCodeTests/PyMarshmallowDataclassGenerator
    - sh run.sh
  coverage: '/TOTAL.*\s(\d+%)/'

run-tests-PyDjangoModelGenerator:
  stage: test
  image: docker:25
  services:
    - docker:25-dind
  artifacts:
    name: coverage
    paths:
      - generatedCodeTests/PyDjangoModelGenerator/htmlcov/
  script:
    - cd generatedCodeTests/PyDjangoModelGenerator
    - sh run.sh
  coverage: '/TOTAL.*\s(\d+%)/'

publish-archive:
  stage: publish
  image: openjdk:11
  only:
    refs:
      - branches
    variables:
      # run for protected and release branches only
      - $CI_COMMIT_REF_PROTECTED == 'true'
      - $CI_COMMIT_BRANCH =~ /^release_.*/
  cache:
    key: $CI_PIPELINE_ID
    policy: pull
    paths:
      - build/
  artifacts:
    name: distribution
    paths:
      - build/distributions/
  script:
    - ls build/distributions/

docker-push:
  stage: publish
  image: docker:stable
  only:
    refs:
      - branches
    variables:
      # run for protected and release branches only
      - $CI_COMMIT_REF_PROTECTED == 'true'
      - $CI_COMMIT_BRANCH =~ /^release_.*/
  cache:
    key: $CI_PIPELINE_ID
    policy: pull
    paths:
      - build/
  services:
    - docker:stable-dind
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker load --input build/jib-image.tar
    - docker push $IMAGE

github-create-release:
  stage: publish
  image: alpine:latest
  only:
    refs:
      - branches
    variables:
      # run for release branches only
      - $CI_COMMIT_BRANCH =~ /^release_.*/
  cache:
    key: $CI_PIPELINE_ID
    policy: pull
    paths:
      - build/
  script:
    - apk add github-cli
    - git tag --list
    - git status
    - git remote add github github.com:atten/ez-code-generator.git
    - gh release create $(git tag --list | tail -n 1) --generate-notes build/distributions/*.zip

pypi-package:
  stage: publish
  image: python:3-alpine
  only:
    refs:
      - branches
    variables:
      # run for release branches only
      - $CI_COMMIT_BRANCH =~ /^release_.*/
  cache:
    key: $CI_PIPELINE_ID
    policy: pull
    paths:
      - build/
  script:
    - pip install build twine
    - mkdir tmp
    - cd tmp && tar -xf ../build/distributions/*.tar && mv -v * ez-codegen && cd ..
    - cp scripts/__main__.py tmp/ez-codegen/
    - python -m build --outdir build/python/
    - TWINE_USERNAME=__token__ twine upload --verbose --repository pypi build/python/*.whl

package org.codegen.generators

import org.codegen.dto.*
import org.codegen.extensions.*

class KtApiInterfaceCodeGenerator: AbstractCodeGenerator() {

    private fun getEntitiesWithMethods() = getEntities().filter { it.methods.isNotEmpty() }

    private fun buildInterfaceExtensions(entity: Entity): String =
        entity.methods.filter { it.arguments.size > 1 }.joinToString(separator = "\n") { method ->
            val className = entity.name.camelCase().capitalize()
            val methodName = method.name.camelCase()
            val requestName = "${method.name} request".camelCase().capitalize()

            val methodArguments = method.arguments.map { it.name.camelCase() }
            val methodValues = method.arguments.map { Pair(it, it.name.camelCase()) }.map { (argument, repr) -> if (argument.multiple) "${repr}.toTypedArray()" else repr }
            val methodBody = methodArguments.zip(methodValues).joinToString(separator = ", ") { "${it.first} = request.${it.second}" }
            "fun ${className}.${methodName}(request: ${requestName}) = ${methodName}($methodBody)"
        }

    override fun build(): String {
        val interfaceGen = KtInterfaceCodeGenerator().also { it.copyDataTypesFrom(this) }
        val requestGen = KtSerializableDataclassCodeGenerator().also { it.copyDataTypesFrom(this) }

        val builtInterfaces = getEntitiesWithMethods().map { interfaceGen.buildEntity(it) }
        val buildRequests = getEntities(includeMethods = true).filter { it.fields.size > 1 }.map { requestGen.buildEntity(it) }
        val buildExtensions = getEntitiesWithMethods().map { buildInterfaceExtensions(it) }

        val topHeader = "// Generated by DTO-Codegen\npackage \${PACKAGE_NAME}\n\n".substituteEnvVars()
        return (interfaceGen.getHeaders() + requestGen.getHeaders()).distinct().sorted().joinToString("\n", prefix = topHeader, postfix = "\n\n") +
                requestGen.getEnumClasses().joinToString(separator = "\n\n", postfix = "\n") +
                (buildRequests + builtInterfaces + buildExtensions).joinToString("\n", postfix = "\n")
    }
}

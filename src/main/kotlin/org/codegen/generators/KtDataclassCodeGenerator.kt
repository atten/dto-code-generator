package org.codegen.generators

import org.codegen.dto.*

class KtDataclassCodeGenerator: AbstractCodeGenerator() {
    private val headers = mutableListOf(
        "// Generated by DTO-Codegen",
        "package \${PACKAGE_NAME}".substituteEnvVars(),
        ""
    )

    private fun addHeader(str: String) {
        if (!headers.contains(str))
            headers.add(str)
    }

    private fun buildEntity(entity: Entity): String {
        val preLines = mutableListOf<String>()
        val className = entity.name.camelCase().capitalize()
        val definition = "data class $className ("
        val lines = mutableListOf(definition)

        entity.description?.also {
            preLines.add("/**")
            preLines.add(" * " + entity.description)
            preLines.add("*/")
        }

        // include parent class fields (because data class inheritance is not allowed)
        val includedFields = entity.parent?.let { getIncludedEntity(it).fields } ?: listOf()

        for (field in entity.fields + includedFields) {
            val dtypeProps = getDtype(field.dtype)
            val definitionKeyword = "val"
            val fieldName = field.name.normalize().camelCase()
            val assignmentExpression = if (field.default == null) {
                ""
            } else {
                "= " + dtypeProps.toGeneratedValue(field.default)
            }

            val typeName = dtypeProps.definition.let { if (field.nullable) "$it?" else it }

            val fullDefinition = "$definitionKeyword $fieldName: $typeName $assignmentExpression".trim()

            field.shortDescription?.let {
                lines.add("    // $it")
            }

            field.longDescription?.let {
                lines.add("    // $it")
            }

            lines.add("    $fullDefinition,")

            // include headers
            dtypeProps.requiredHeaders.forEach { addHeader(it.substituteEnvVars()) }
        }

        lines.add(")")
        return (preLines + lines).joinToString("\n")
    }

    override fun build(): String {
        val builtEntities = entities.map { buildEntity(it) }

        return headers.joinToString("\n", postfix = "\n\n") +
                builtEntities.joinToString("\n\n\n", postfix = "\n")
    }
}
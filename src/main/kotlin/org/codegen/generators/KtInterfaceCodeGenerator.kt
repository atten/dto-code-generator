package org.codegen.generators

import org.codegen.dto.*
import org.codegen.extensions.*

class KtInterfaceCodeGenerator: AbstractCodeGenerator() {
    private val headers = mutableListOf<String>()

    private fun addHeader(str: String) {
        if (!headers.contains(str))
            headers.add(str)
    }

    fun getHeaders() = headers

    private fun buildMethod(method: Method): String {
        val name = method.name.camelCase()
        val returnDtypeProps = getDtype(method.dtype)
        val returnStatement = if (returnDtypeProps.definition != "Unit")
            ": ${returnDtypeProps.definition}" + if (method.nullable) "?" else ""
        else
            ""

        val arguments = mutableListOf<String>()

        for (argument in method.arguments) {
            val argName = argument.name.camelCase()
            val dtypeProps = getDtype(argument.dtype)
            val argTypeName = dtypeProps.definition.let { if (argument.nullable) "$it?" else it }
            val argDefaultValue = if (argument.default == UNSET) {
                ""
            } else {
                dtypeProps.toGeneratedValue(argument.default ?: "null")
            }
                .let { if (it.isEmpty()) "" else "= $it" }

            val prefix = if (argument.multiple) "vararg" else ""
            val argumentString = "$prefix ${argName}: $argTypeName $argDefaultValue".trim()
            arguments.add(argumentString)

            // include headers
            dtypeProps.requiredHeaders.forEach { addHeader(it.substituteEnvVars()) }
        }

        val argumentsString = arguments.joinToString(separator = ", ")
        val definition = "fun ${name}($argumentsString)$returnStatement"
        val lines = mutableListOf<String>()

        method.description?.let {
            lines.add("/**\n * ${it.replace("\n", "\n * ")}\n */")
        }
        lines.add(definition)
        return lines.joinToString(separator = "\n")
    }

    fun buildEntity(entity: Entity): String {
        val entityName = entity.name.camelCase().capitalize()
        val interfaceDefinition = "interface $entityName {"
        val builtMethods = entity.methods.map { buildMethod(it) }
        return builtMethods.joinToString(separator = "\n\n", prefix = "${interfaceDefinition}\n", postfix = "\n}\n") {"    ${it.replace("\n", "\n    ")}"}
    }

    override fun build(): String {
        val builtEntities = getEntities().map { buildEntity(it) }
        val topHeader = "// Generated by DTO-Codegen\npackage \${PACKAGE_NAME}\n\n".substituteEnvVars()
        return headers.sorted().joinToString("\n", prefix = topHeader, postfix = "\n\n") +
                builtEntities.joinToString("\n\n\n", postfix = "\n")
    }
}
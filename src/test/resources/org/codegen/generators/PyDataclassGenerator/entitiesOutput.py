# Auto-generated by ez-codegen TEST_VERSION, do not edit
# flake8: noqa
from dataclasses import dataclass
from dataclasses import field
from datetime import datetime
from datetime import timedelta
import typing as t


@dataclass
class BasicDto:
    timestamp: datetime = field()
    duration: timedelta = field()
    enum_value: str = field()
    # short description
    # very long description lol
    documented_value: float = field()
    list_value: list[int] = field()
    optional_value: float = 0
    nullable_value: t.Optional[bool] = None
    optional_list_value: list[int] = field(default_factory=list)


@dataclass
class AdvancedDto:
    """
    entity with all-singing all-dancing properties
    """
    a: int = field()
    b: int = field()

    @property
    def sum(self) -> int:
        return self.a + self.b


@dataclass
class ContainerDto:
    """
    entity with containers
    """
    basic_single: BasicDto = field()
    basic_list: t.Optional[list[BasicDto]] = field()


__all__ = [
    "AdvancedDto",
    "BasicDto",
    "ContainerDto",
]

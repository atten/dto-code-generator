# Generated by DTO-Codegen

from dataclasses import dataclass
from dataclasses import field
from datetime import datetime
import marshmallow
import typing as t


ENUM_VALUE_VALUE_1 = "value 1"
ENUM_VALUE_VALUE_2 = "value 2"
ENUM_VALUE_VALUE_3 = "value 3"
ENUM_VALUES = [ENUM_VALUE_VALUE_1, ENUM_VALUE_VALUE_2, ENUM_VALUE_VALUE_3]


@dataclass
class BasicDTO:
    timestamp: datetime = field(metadata=dict(marshmallow_field=marshmallow.fields.DateTime()))
    enum_value: str = field(metadata=dict(marshmallow_field=marshmallow.fields.String(validate=[marshmallow.fields.validate.OneOf(ENUM_VALUES)])))
    # short description
    # very long description lol
    documented_value: float = field(metadata=dict(marshmallow_field=marshmallow.fields.Float(data_key="customName")))
    optional_value: float = field(metadata=dict(marshmallow_field=marshmallow.fields.Float()), default=0)
    nullable_value: t.Optional[bool] = field(metadata=dict(marshmallow_field=marshmallow.fields.Boolean(allow_none=True)), default=None)


@dataclass
class AdvancedDTO:
    """
    entity with all-singing all-dancing properties
    """
    a: int = field(metadata=dict(marshmallow_field=marshmallow.fields.Integer()))
    b: int = field(metadata=dict(marshmallow_field=marshmallow.fields.Integer()))

    def __post_init__(self):
        if not(self.a < self.b):
            raise marshmallow.ValidationError('a must be < b')
        if not(self.a >= 0):
            raise marshmallow.ValidationError('a must be >= 0')

    @property
    def sum(self) -> int:
        return self.a + self.b


__all__ = [
    "AdvancedDTO",
    "BasicDTO",
    "ENUM_VALUES",
    "ENUM_VALUE_VALUE_1",
    "ENUM_VALUE_VALUE_2",
    "ENUM_VALUE_VALUE_3",
]
